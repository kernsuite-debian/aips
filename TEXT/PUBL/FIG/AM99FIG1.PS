%!PS-Adobe-2.0 EPSF-2.0
%%Title: aips_servers_inet.eps
%%Creator: fig2dev Version 3.2 Patchlevel 0-beta3
%%CreationDate: Fri May 29 09:48:51 1998
%%For: pmurphy@orangutan (Patrick P. Murphy)
%%Orientation: Portrait
%%BoundingBox: 0 0 563 632
%%Pages: 0
%%BeginSetup
%%EndSetup
%%Magnification: 1.0000
%-----------------------------------------------------------------------
%;  Copyright (C) 1998
%;  Associated Universities, Inc. Washington DC, USA.
%;
%;  This program is free software; you can redistribute it and/or
%;  modify it under the terms of the GNU General Public License as
%;  published by the Free Software Foundation; either version 2 of
%;  the License, or (at your option) any later version.
%;
%;  This program is distributed in the hope that it will be useful,
%;  but WITHOUT ANY WARRANTY; without even the implied warranty of
%;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%;  GNU General Public License for more details.
%;
%;  You should have received a copy of the GNU General Public
%;  License along with this program; if not, write to the Free
%;  Software Foundation, Inc., 675 Massachusetts Ave, Cambridge,
%;  MA 02139, USA.
%;
%;  Correspondence concerning AIPS should be addressed as follows:
%;          Internet email: aipsmail@nrao.edu.
%;          Postal address: AIPS Project Office
%;                          National Radio Astronomy Observatory
%;                          520 Edgemont Road
%;                          Charlottesville, VA 22903-2475 USA
%-----------------------------------------------------------------------
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
-21.0 719.0 translate
1 -1 scale
.9 .9 scale % to make patterns same scale as in xfig

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index show		% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% this is the pattern fill program from the Second edition Reference Manual
% with changes to call the above pattern fill
% left30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<c000c000300030000c000c000300030000c000c000300030
	000c000c00030003c000c000300030000c000c0003000300
	00c000c000300030000c000c00030003>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P1 exch def
1.1111 1.1111 scale %restore scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def
%%EndProlog

$F2psBegin
10 setmiterlimit
n -1000 12969 m -1000 -1000 l 10723 -1000 l 10723 12969 l cp clip
 0.06000 0.06000 sc
45.000 slw
% Ellipse
n 8176 5794 586 586 0 360 DrawEllipse gs col3 1.00 shd ef gr gs col8 s gr

% Ellipse
n 8176 5719 586 586 0 360 DrawEllipse gs col3 1.00 shd ef gr gs col8 s gr

% Ellipse
n 8175 5639 586 586 0 360 DrawEllipse gs col17 1.00 shd ef gr gs col8 s gr

% Polyline
15.000 slw
 [90] 0 sd
n 3975 4950 m 6675 4950 l 6675 9975 l 3975 9975 l cp gs /PC [[1.00 0.75 0.75] [0.00 0.00 0.56]] def
15.00 15.00 sc P1 [16 0 0 -8 265.00 330.00] PATmp PATsp ef gr PATusp gs col8 s gr  [] 0 sd
% Polyline
 [90] 0 sd
n 450 3075 m 6750 3075 l 6750 4650 l 3150 4650 l 3150 8175 l 375 8175 l
 375 3075 l cp gs /PC [[1.00 1.00 0.00] [0.00 0.00 0.56]] def
15.00 15.00 sc P1 [16 0 0 -8 25.00 205.00] PATmp PATsp ef gr PATusp gs col8 s gr  [] 0 sd
% Polyline
45.000 slw
n 4230 1500 m 4125 1500 4125 2520 105 arcto 4 {pop} repeat
  4125 2625 6420 2625 105 arcto 4 {pop} repeat
  6525 2625 6525 1605 105 arcto 4 {pop} repeat
  6525 1500 4230 1500 105 arcto 4 {pop} repeat
 cp gs col11 1.00 shd ef gr gs col8 s gr
% Polyline
n 4230 3300 m 4125 3300 4125 4320 105 arcto 4 {pop} repeat
  4125 4425 6420 4425 105 arcto 4 {pop} repeat
  6525 4425 6525 3405 105 arcto 4 {pop} repeat
  6525 3300 4230 3300 105 arcto 4 {pop} repeat
 cp gs col29 1.00 shd ef gr gs col8 s gr
% Polyline
n 4230 5100 m 4125 5100 4125 6120 105 arcto 4 {pop} repeat
  4125 6225 6420 6225 105 arcto 4 {pop} repeat
  6525 6225 6525 5205 105 arcto 4 {pop} repeat
  6525 5100 4230 5100 105 arcto 4 {pop} repeat
 cp gs col29 1.00 shd ef gr gs col8 s gr
% Polyline
n 4230 6900 m 4125 6900 4125 7920 105 arcto 4 {pop} repeat
  4125 8025 6420 8025 105 arcto 4 {pop} repeat
  6525 8025 6525 7005 105 arcto 4 {pop} repeat
  6525 6900 4230 6900 105 arcto 4 {pop} repeat
 cp gs col29 1.00 shd ef gr gs col8 s gr
% Polyline
n 4230 8700 m 4125 8700 4125 9720 105 arcto 4 {pop} repeat
  4125 9825 6420 9825 105 arcto 4 {pop} repeat
  6525 9825 6525 8805 105 arcto 4 {pop} repeat
  6525 8700 4230 8700 105 arcto 4 {pop} repeat
 cp gs col29 1.00 shd ef gr gs col8 s gr
% Ellipse
n 8175 5639 586 586 0 360 DrawEllipse gs col17 1.00 shd ef gr gs col8 s gr

% Ellipse
n 8177 5611 586 586 0 360 DrawEllipse gs col3 1.00 shd ef gr gs col8 s gr

% Polyline
n 705 10800 m 600 10800 600 11820 105 arcto 4 {pop} repeat
  600 11925 2895 11925 105 arcto 4 {pop} repeat
  3000 11925 3000 10905 105 arcto 4 {pop} repeat
  3000 10800 705 10800 105 arcto 4 {pop} repeat
 cp gs col11 1.00 shd ef gr gs col8 s gr
% Polyline
n 705 5100 m 600 5100 600 6120 105 arcto 4 {pop} repeat
  600 6225 2895 6225 105 arcto 4 {pop} repeat
  3000 6225 3000 5205 105 arcto 4 {pop} repeat
  3000 5100 705 5100 105 arcto 4 {pop} repeat
 cp gs col6 1.00 shd ef gr gs col8 s gr
% Polyline
n 705 3300 m 600 3300 600 4320 105 arcto 4 {pop} repeat
  600 4425 2895 4425 105 arcto 4 {pop} repeat
  3000 4425 3000 3405 105 arcto 4 {pop} repeat
  3000 3300 705 3300 105 arcto 4 {pop} repeat
 cp gs col6 1.00 shd ef gr gs col8 s gr
% Polyline
n 7500 8775 m 9000 8775 l 9000 9675 l 7500 9675 l cp gs col3 1.00 shd ef gr gs col8 s gr
% Polyline
n 7500 7200 m 9000 7200 l 9000 8100 l 7500 8100 l cp gs col3 1.00 shd ef gr gs col8 s gr
% Polyline
n 705 6900 m 600 6900 600 7920 105 arcto 4 {pop} repeat
  600 8025 2895 8025 105 arcto 4 {pop} repeat
  3000 8025 3000 7005 105 arcto 4 {pop} repeat
  3000 6900 705 6900 105 arcto 4 {pop} repeat
 cp gs col6 1.00 shd ef gr gs col8 s gr
% Polyline
n 2030 2125 m 1925 2125 1925 2520 105 arcto 4 {pop} repeat
  1925 2625 2920 2625 105 arcto 4 {pop} repeat
  3025 2625 3025 2230 105 arcto 4 {pop} repeat
  3025 2125 2030 2125 105 arcto 4 {pop} repeat
 cp gs col11 1.00 shd ef gr gs col8 s gr
% Polyline
n 605 2125 m 500 2125 500 2520 105 arcto 4 {pop} repeat
  500 2625 1495 2625 105 arcto 4 {pop} repeat
  1600 2625 1600 2230 105 arcto 4 {pop} repeat
  1600 2125 605 2125 105 arcto 4 {pop} repeat
 cp gs col11 1.00 shd ef gr gs col8 s gr
% Polyline
n 6730 10925 m 6625 10925 6625 11070 105 arcto 4 {pop} repeat
  6625 11175 7395 11175 105 arcto 4 {pop} repeat
  7500 11175 7500 11030 105 arcto 4 {pop} repeat
  7500 10925 6730 10925 105 arcto 4 {pop} repeat
 cp gs col29 1.00 shd ef gr gs col8 s gr
% Polyline
n 6730 11375 m 6625 11375 6625 11520 105 arcto 4 {pop} repeat
  6625 11625 7395 11625 105 arcto 4 {pop} repeat
  7500 11625 7500 11480 105 arcto 4 {pop} repeat
  7500 11375 6730 11375 105 arcto 4 {pop} repeat
 cp gs col11 1.00 shd ef gr gs col8 s gr
% Polyline
n 6730 10450 m 6625 10450 6625 10595 105 arcto 4 {pop} repeat
  6625 10700 7395 10700 105 arcto 4 {pop} repeat
  7500 10700 7500 10555 105 arcto 4 {pop} repeat
  7500 10450 6730 10450 105 arcto 4 {pop} repeat
 cp gs col6 1.00 shd ef gr gs col8 s gr
/Courier-Bold ff 360.00 scf sf
5325 1950 m
gs 1 -1 sc (AIPS) dup sw pop 2 div neg 0 rm  col8 sh gr
/Times-Roman ff 210.00 scf sf
5325 2250 m
gs 1 -1 sc (on local system) dup sw pop 2 div neg 0 rm  col8 sh gr
/Courier-Bold ff 360.00 scf sf
5325 3675 m
gs 1 -1 sc (TVSERV) dup sw pop 2 div neg 0 rm  col8 sh gr
/Times-Roman ff 210.00 scf sf
5325 3975 m
gs 1 -1 sc (Lock Daemon for) dup sw pop 2 div neg 0 rm  col8 sh gr
/Times-Roman ff 210.00 scf sf
5325 4275 m
gs 1 -1 sc (local XAS TV) dup sw pop 2 div neg 0 rm  col8 sh gr
/Courier-Bold ff 360.00 scf sf
5325 5475 m
gs 1 -1 sc (TPMON1) dup sw pop 2 div neg 0 rm  col8 sh gr
/Times-Roman ff 210.00 scf sf
5325 5775 m
gs 1 -1 sc (Daemon for remote) dup sw pop 2 div neg 0 rm  col8 sh gr
/Times-Roman ff 210.00 scf sf
5325 6030 m
gs 1 -1 sc (access to FITS... disk) dup sw pop 2 div neg 0 rm  col8 sh gr
/Courier-Bold ff 360.00 scf sf
5325 7275 m
gs 1 -1 sc (TPMON2) dup sw pop 2 div neg 0 rm  col8 sh gr
/Times-Roman ff 210.00 scf sf
5325 7575 m
gs 1 -1 sc (Daemon for remote) dup sw pop 2 div neg 0 rm  col8 sh gr
/Times-Roman ff 210.00 scf sf
5325 7830 m
gs 1 -1 sc (access to TAPE 1) dup sw pop 2 div neg 0 rm  col8 sh gr
/Courier-Bold ff 360.00 scf sf
5325 9075 m
gs 1 -1 sc (TPMON3) dup sw pop 2 div neg 0 rm  col8 sh gr
/Times-Roman ff 210.00 scf sf
5325 9375 m
gs 1 -1 sc (Daemon for remote) dup sw pop 2 div neg 0 rm  col8 sh gr
/Times-Roman ff 210.00 scf sf
5325 9630 m
gs 1 -1 sc (access to TAPE 2) dup sw pop 2 div neg 0 rm  col8 sh gr
% Polyline
15.000 slw
gs  clippath
3294 3960 m 3054 3900 l 3294 3840 l 2970 3840 l 2970 3960 l cp
clip
n 4125 3900 m 3000 3900 l gs col17 1.00 shd ef gr gs col8 s gr gr

% arrowhead
n 3294 3960 m 3054 3900 l 3294 3840 l 3294 3900 l 3294 3960 l  cp gs col8 1.00 shd ef gr  col8 s
% Polyline
 [90] 0 sd
n 600 10275 m 9600 10275 l gs col8 s gr  [] 0 sd
% Polyline
gs  clippath
5940 10119 m 6000 9879 l 6060 10119 l 6060 9795 l 5940 9795 l cp
clip
n 3000 11700 m 6000 11700 l 6000 9825 l gs col8 s gr gr

% arrowhead
n 5940 10119 m 6000 9879 l 6060 10119 l 6000 10119 l 5940 10119 l  cp gs col8 1.00 shd ef gr  col8 s
% Polyline
gs  clippath
4001 8147 m 4231 8056 l 4071 8245 l 4334 8056 l 4265 7959 l cp
clip
n 3000 11400 m 3750 11400 l 3750 8400 l 4275 8025 l gs col8 s gr gr

% arrowhead
n 4001 8147 m 4231 8056 l 4071 8245 l 4036 8196 l 4001 8147 l  cp gs col8 1.00 shd ef gr  col8 s
% Polyline
gs  clippath
4084 6457 m 4249 6272 l 4190 6513 l 4342 6227 l 4236 6170 l cp
clip
n 3000 11100 m 3600 11100 l 3600 7500 l 4275 6225 l gs col8 s gr gr

% arrowhead
n 4084 6457 m 4249 6272 l 4190 6513 l 4137 6485 l 4084 6457 l  cp gs col8 1.00 shd ef gr  col8 s
% Polyline
gs  clippath
3835 4503 m 4076 4449 l 3889 4610 l 4179 4465 l 4125 4358 l cp
clip
n 3000 10875 m 3450 10875 l 3450 7500 l 3675 6900 l 3675 4650 l 4125 4425 l gs col8 s gr gr

% arrowhead
n 3835 4503 m 4076 4449 l 3889 4610 l 3862 4556 l 3835 4503 l  cp gs col8 1.00 shd ef gr  col8 s
% Polyline
gs  clippath
1740 8319 m 1800 8079 l 1860 8319 l 1860 7995 l 1740 7995 l cp
clip
n 1800 10800 m 1800 8025 l gs col8 s gr gr

% arrowhead
n 1740 8319 m 1800 8079 l 1860 8319 l 1800 8319 l 1740 8319 l  cp gs col8 1.00 shd ef gr  col8 s
% Polyline
gs  clippath
472 6446 m 647 6271 l 575 6508 l 742 6230 l 639 6168 l cp
clip
n 900 10800 m 900 8700 l 450 7950 l 450 6600 l 675 6225 l gs col8 s gr gr

% arrowhead
n 472 6446 m 647 6271 l 575 6508 l 524 6477 l 472 6446 l  cp gs col8 1.00 shd ef gr  col8 s
% Polyline
gs  clippath
3274 6778 m 3043 6868 l 3204 6680 l 2941 6869 l 3010 6966 l cp
clip
n 4125 2400 m 3525 2400 l 3525 6525 l 3000 6900 l gs col8 s gr gr

% arrowhead
n 3274 6778 m 3043 6868 l 3204 6680 l 3239 6729 l 3274 6778 l  cp gs col8 1.00 shd ef gr  col8 s
% Polyline
gs  clippath
3189 5033 m 2966 5140 l 3112 4941 l 2864 5148 l 2940 5240 l cp
clip
n 4125 1800 m 3375 1800 l 3375 4800 l 2925 5175 l gs col8 s gr gr

% arrowhead
n 3189 5033 m 2966 5140 l 3112 4941 l 3151 4987 l 3189 5033 l  cp gs col8 1.00 shd ef gr  col8 s
% Polyline
gs  clippath
7281 5640 m 7521 5700 l 7281 5760 l 7605 5760 l 7605 5640 l cp
clip
n 6525 5700 m 7575 5700 l gs col8 s gr gr

% arrowhead
n 7281 5640 m 7521 5700 l 7281 5760 l 7281 5700 l 7281 5640 l  cp gs col8 1.00 shd ef gr  col8 s
% Polyline
gs  clippath
7206 7440 m 7446 7500 l 7206 7560 l 7530 7560 l 7530 7440 l cp
clip
n 6525 7500 m 7500 7500 l gs col8 s gr gr

% arrowhead
n 7206 7440 m 7446 7500 l 7206 7560 l 7206 7500 l 7206 7440 l  cp gs col8 1.00 shd ef gr  col8 s
% Polyline
gs  clippath
7206 9240 m 7446 9300 l 7206 9360 l 7530 9360 l 7530 9240 l cp
clip
n 6525 9300 m 7500 9300 l gs col8 s gr gr

% arrowhead
n 7206 9240 m 7446 9300 l 7206 9360 l 7206 9300 l 7206 9240 l  cp gs col8 1.00 shd ef gr  col8 s
% Polyline
gs  clippath
8160 4731 m 8100 4971 l 8040 4731 l 8040 5055 l 8160 5055 l cp
clip
n 6525 2400 m 8100 2400 l 8100 5025 l gs col8 s gr gr

% arrowhead
n 8160 4731 m 8100 4971 l 8040 4731 l 8100 4731 l 8160 4731 l  cp gs col8 1.00 shd ef gr  col8 s
% Polyline
gs  clippath
8885 6964 m 8724 7151 l 8778 6910 l 8633 7200 l 8740 7254 l cp
clip
n 6525 2100 m 9000 2100 l 9000 6600 l 8700 7200 l gs col8 s gr gr

% arrowhead
n 8885 6964 m 8724 7151 l 8778 6910 l 8831 6937 l 8885 6964 l  cp gs col8 1.00 shd ef gr  col8 s
% Polyline
gs  clippath
9185 8539 m 9024 8726 l 9078 8485 l 8933 8775 l 9040 8829 l cp
clip
n 6525 1800 m 9300 1800 l 9300 8175 l 9000 8775 l gs col8 s gr gr

% arrowhead
n 9185 8539 m 9024 8726 l 9078 8485 l 9131 8512 l 9185 8539 l  cp gs col8 1.00 shd ef gr  col8 s
% Polyline
n 7950 8925 m 8850 8925 l 8850 9075 l 7950 9075 l cp gs col17 1.00 shd ef gr gs col8 s gr
% Polyline
n 7650 8850 m 7800 8850 l 7800 8925 l 7650 8925 l cp gs col17 1.00 shd ef gr gs col8 s gr
% Polyline
n 7650 9000 m 7800 9000 l 7800 9075 l 7650 9075 l cp gs col17 1.00 shd ef gr gs col8 s gr
% Polyline
gs  clippath
5385 3006 m 5325 3246 l 5265 3006 l 5265 3330 l 5385 3330 l cp
clip
n 5325 2625 m 5325 3300 l gs col17 1.00 shd ef gr gs col8 s gr gr

% arrowhead
n 5385 3006 m 5325 3246 l 5265 3006 l 5325 3006 l 5385 3006 l  cp gs col8 1.00 shd ef gr  col8 s
% Polyline
n 7950 7350 m 8850 7350 l 8850 7500 l 7950 7500 l cp gs col17 1.00 shd ef gr gs col8 s gr
% Polyline
n 7650 7275 m 7800 7275 l 7800 7350 l 7650 7350 l cp gs col17 1.00 shd ef gr gs col8 s gr
% Polyline
n 7650 7425 m 7800 7425 l 7800 7500 l 7650 7500 l cp gs col17 1.00 shd ef gr gs col8 s gr
% Polyline
gs  clippath
2385 2781 m 2325 3021 l 2265 2781 l 2265 3105 l 2385 3105 l cp
clip
n 2325 2625 m 2325 3075 l gs col8 s gr gr

% arrowhead
n 2385 2781 m 2325 3021 l 2265 2781 l  col8 s
% Polyline
gs  clippath
2535 2781 m 2475 3021 l 2415 2781 l 2415 3105 l 2535 3105 l cp
clip
n 2475 2625 m 2475 3075 l gs col8 s gr gr

% arrowhead
n 2535 2781 m 2475 3021 l 2415 2781 l  col8 s
% Polyline
gs  clippath
2685 2781 m 2625 3021 l 2565 2781 l 2565 3105 l 2685 3105 l cp
clip
n 2625 2625 m 2625 3075 l gs col8 s gr gr

% arrowhead
n 2685 2781 m 2625 3021 l 2565 2781 l  col8 s
% Polyline
gs  clippath
960 2781 m 900 3021 l 840 2781 l 840 3105 l 960 3105 l cp
clip
n 900 2625 m 900 3075 l gs col8 s gr gr

% arrowhead
n 960 2781 m 900 3021 l 840 2781 l  col8 s
% Polyline
gs  clippath
1110 2781 m 1050 3021 l 990 2781 l 990 3105 l 1110 3105 l cp
clip
n 1050 2625 m 1050 3075 l gs col8 s gr gr

% arrowhead
n 1110 2781 m 1050 3021 l 990 2781 l  col8 s
% Polyline
gs  clippath
1260 2781 m 1200 3021 l 1140 2781 l 1140 3105 l 1260 3105 l cp
clip
n 1200 2625 m 1200 3075 l gs col8 s gr gr

% arrowhead
n 1260 2781 m 1200 3021 l 1140 2781 l  col8 s
/Courier-Bold ff 360.00 scf sf
1725 11250 m
gs 1 -1 sc (AIPS) dup sw pop 2 div neg 0 rm  col8 sh gr
/Times-Roman ff 210.00 scf sf
1725 11550 m
gs 1 -1 sc (on remote system) dup sw pop 2 div neg 0 rm  col8 sh gr
/Courier-Bold ff 360.00 scf sf
1800 7275 m
gs 1 -1 sc (MSGSRV) dup sw pop 2 div neg 0 rm  col8 sh gr
/Times-Roman ff 210.00 scf sf
1800 7575 m
gs 1 -1 sc (Message Server for) dup sw pop 2 div neg 0 rm  col8 sh gr
/Times-Roman ff 210.00 scf sf
1800 7800 m
gs 1 -1 sc (AIPS Tasks) dup sw pop 2 div neg 0 rm  col8 sh gr
/Courier-Bold ff 360.00 scf sf
1800 5475 m
gs 1 -1 sc (TEKSRV) dup sw pop 2 div neg 0 rm  col8 sh gr
/Times-Roman ff 210.00 scf sf
1800 5775 m
gs 1 -1 sc (Graphical display for plots) dup sw pop 2 div neg 0 rm  col8 sh gr
/Times-Roman ff 210.00 scf sf
1800 6000 m
gs 1 -1 sc (\(tektronix emulator\)) dup sw pop 2 div neg 0 rm  col8 sh gr
/Courier-Bold ff 360.00 scf sf
1800 3675 m
gs 1 -1 sc (XAS \(TV\)) dup sw pop 2 div neg 0 rm  col8 sh gr
/Times-Roman ff 210.00 scf sf
1800 3975 m
gs 1 -1 sc (Image display using) dup sw pop 2 div neg 0 rm  col8 sh gr
/Times-Roman ff 210.00 scf sf
1800 4200 m
gs 1 -1 sc (INET sockets \(default\)) dup sw pop 2 div neg 0 rm  col8 sh gr
/Courier-Bold ff 360.00 scf sf
8250 9525 m
gs 1 -1 sc (TAPE 2) dup sw pop 2 div neg 0 rm  col8 sh gr
/Courier-Bold ff 360.00 scf sf
8250 7950 m
gs 1 -1 sc (TAPE 1) dup sw pop 2 div neg 0 rm  col8 sh gr
/Courier-Bold ff 360.00 scf sf
8175 5475 m
gs 1 -1 sc (FITS) dup sw pop 2 div neg 0 rm  col8 sh gr
/Courier-Bold ff 360.00 scf sf
8175 5850 m
gs 1 -1 sc (DISK) dup sw pop 2 div neg 0 rm  col8 sh gr
/Courier-Bold ff 300.00 scf sf
1050 2475 m
gs 1 -1 sc (AIPS2) dup sw pop 2 div neg 0 rm  col8 sh gr
/Courier-Bold ff 300.00 scf sf
2475 2475 m
gs 1 -1 sc (AIPS3) dup sw pop 2 div neg 0 rm  col8 sh gr
/Times-Roman ff 210.00 scf sf
7800 10650 m
gs 1 -1 sc (Visible window) col8 sh gr
/Times-Roman ff 210.00 scf sf
7800 11100 m
gs 1 -1 sc (Daemon \(no window\)) col8 sh gr
/Times-Roman ff 210.00 scf sf
7800 11550 m
gs 1 -1 sc (AIPS Session) col8 sh gr
$F2psEnd
rs
end
