; SOLTYPE
;---------------------------------------------------------------
;! Solution type
;# ADVERB CALIBRATION
;-----------------------------------------------------------------------
;;  Copyright (C) 1995, 2004
;;  Associated Universities, Inc. Washington DC, USA.
;;
;;  This program is free software; you can redistribute it and/or
;;  modify it under the terms of the GNU General Public License as
;;  published by the Free Software Foundation; either version 2 of
;;  the License, or (at your option) any later version.
;;
;;  This program is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;  GNU General Public License for more details.
;;
;;  You should have received a copy of the GNU General Public
;;  License along with this program; if not, write to the Free
;;  Software Foundation, Inc., 675 Massachusetts Ave, Cambridge,
;;  MA 02139, USA.
;;
;;  Correspondence concerning AIPS should be addressed as follows:
;;         Internet email: aipsmail@nrao.edu.
;;         Postal address: AIPS Project Office
;;                         National Radio Astronomy Observatory
;;                         520 Edgemont Road
;;                         Charlottesville, VA 22903-2475 USA
;-----------------------------------------------------------------------
SOLTYPE   LLLLLLLLLLLLUUUUUUUUUUUU CCCCCCCCCCCCCCCCCCCCCCCCCCCCC
----------------------------------------------------------------
SOLTYPE
Type:  Adverb  (string(4))
Use:   This adverb specifies the least squares solution type used in
       calibration routines.  Values used for single-pass solutions
          '    ' => normal least squares,
          'L1  ' => L1 solution,
          'GCON' => least squares which may include gain constraint
       Values for multi-pass "robust" solutions are
          'R   ' => normal least squares,
          'L1R ' => L1 solution,
          'GCOR' => least squares which may include gain constraint
       Note that all three use different mathematical methods even if
       no actual gain constraint is applied.
Null value:
       '    '   => normal least squares.

Discussion:
   Each gain solution routine does the following:
      FOR i = I1,10
          Using only unflagged data:
             find gain-set (i)
             determine deviation of data from gains = rms(i)
          Unflag the temporarily flagged data if any
          Temporarily flag any data deviating from gain-set(i)
             by > rms(i) * FF(i)
          END
   where
          FF /7., 5., 4., 3.5, 3., 2.8, 2.6, 2.4, 2.2, 2.5/
   and FF(10) may be replaced by a user-selected value.  In CALIB,
   the user selects FF(10) with DOFLAG and may choose to have the
   temporary flags generated at the last pass used to flag the data in
   a more permanent way.  I1 = 10 for non-robust methods and I1 = 1
   for the robust methods.
----------------------------------------------------------------
