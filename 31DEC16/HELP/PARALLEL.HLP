; PARALLEL
;---------------------------------------------------------------
;! Verb to set or show degree of parallelism
;# VERB POPS
;---------------------------------------------------------------
;;  Copyright (C) 1997
;;  Associated Universities, Inc. Washington DC, USA.
;;
;;  This program is free software; you can redistribute it and/or
;;  modify it under the terms of the GNU General Public License as
;;  published by the Free Software Foundation; either version 2 of
;;  the License, or (at your option) any later version.
;;
;;  This program is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;  GNU General Public License for more details.
;;
;;  You should have received a copy of the GNU General Public
;;  License along with this program; if not, write to the Free
;;  Software Foundation, Inc., 675 Massachusetts Ave, Cambridge,
;;  MA 02139, USA.
;;
;;  Correspondence concerning AIPS should be addressed as follows:
;;         Internet email: aipsmail@nrao.edu.
;;         Postal address: AIPS Project Office
;;                         National Radio Astronomy Observatory
;;                         520 Edgemont Road
;;                         Charlottesville, VA 22903-2475 USA
;---------------------------------------------------------------
PARALLEL  LLLLLLLLLLLLUUUUUUUUUUUU CCCCCCCCCCCCCCCCCCCCCCCCCCCCC
PARALLEL:  Verb to set or show degree of parallelism

          The number of processors to be used for parallelized
          AIPS programs is given as the immediate argument.
----------------------------------------------------------------
PARALLEL
Type: Verb
Use:  PARALLEL(p) will interpret its immediate argument as the
      number of processors that will be used by AIPS tasks that
      have been enabled for parallel processing.  This will not
      have any effect on tasks that have not been specifically
      compiled to use multiple processors or on tasks that are
      already running.
         In general, large problems benefit from having more
      processors working on them but you may experience
      substantial slow-downs if you set p (the number of
      processors too large).  In preparing for a long run (which
      is where parallel processing is most worth while) it is
      often useful to select a small subset of your data that
      can be processed in a few minutes and experiment with
      different values of p to find the fastest option.  Task-
      specific explain files may give more detailed advice.
         The following rules of thumb may be helpful.
         - Keep p = 1 unless you are reasonably sure that
           parallel processing will help with the problem that
           you are dealing with.
         - If your machine has n processors limit p to n-1 so
           that one processor is free to handle the AIPS
           command-line processor and other functions (most
           parallel FORTRAN systems suffer badly if they have
           to share processors with other programs).
         - Reduce the number of processors if you are
           sharing a machine with other users.
      Special cases:
         PRINTER(0): (or no argument) show the current number
                     of processors that will be used by
                     parallel tasks.
Adverbs:  The immediate argument is the number of logical
      processors.
      No actual adverbs.
----------------------------------------------------------------
