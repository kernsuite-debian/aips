      SUBROUTINE QGRIDA (UV, VIS, WT, L, G, CX, CY, NO2, M, LROW,
     *   CNT, TY)
C-----------------------------------------------------------------------
C! Subroutine call version of VFC routine; replaced by vector version.
C# Obselete
C-----------------------------------------------------------------------
C;  Copyright (C) 1995
C;  Associated Universities, Inc. Washington DC, USA.
C;
C;  This program is free software; you can redistribute it and/or
C;  modify it under the terms of the GNU General Public License as
C;  published by the Free Software Foundation; either version 2 of
C;  the License, or (at your option) any later version.
C;
C;  This program is distributed in the hope that it will be useful,
C;  but WITHOUT ANY WARRANTY; without even the implied warranty of
C;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
C;  GNU General Public License for more details.
C;
C;  You should have received a copy of the GNU General Public
C;  License along with this program; if not, write to the Free
C;  Software Foundation, Inc., 675 Massachusetts Ave, Cambridge,
C;  MA 02139, USA.
C;
C;  Correspondence concerning AIPS should be addressed as follows:
C;         Internet email: aipsmail@nrao.edu.
C;         Postal address: AIPS Project Office
C;                         National Radio Astronomy Observatory
C;                         520 Edgemont Road
C;                         Charlottesville, VA 22903-2475 USA
C-----------------------------------------------------------------------
C-----------------------------------------------------------------------
C   Pseudo-AP version
C   QGRIDA grids visibility data that has been loaded into the AP
C   previously.  If requested, positions are shifted and then
C   a taper is applied to the weights if requested before gridding.
C   when taper is requested and TY=2 or 3 locations VIS-2 and
C   VIS-1 are used for work space. If TY=1 locations VIS+2 and
C   VIS+3 are used.
C   Inputs:
C      UV    I  Base address of U,V vector
C      VIS   I  Base address of visibility
C      WTP   I  Base address of weights
C      L     I  Length of visibility record
C      G     I  Base address of grid
C      CX    I  Base address of row convolving fn. (Y on sky)
C      CY    I  Base address of col. convolving fn. (X on sky)
C               Convolving fns. tabulated every 1/100 cell
C      NO2   I  INT ( (no. cells used on a row)/2 )
C      M     I  Number of rows kept in AP (must be odd)
C      LROW  I  Length of a row (V)
C      CNT   I  Number of visibility points.
C      TY    I  Type of visibility data.
C                      1 = I maps
C                      2 = Q,U maps, or two line maps
C                      3 = V maps
C                If TY is negative then tapering is requested.
C                If CNT is neg, do not shift data.
C   Also expects necessary constants in following AP locations:
C           8 = -SIG(U)**2 (CELLS**2) for taper
C           9 = -SIG(V)**2 (CELLS**2) for taper
C          10 = U scaling to cells
C          11 = V scaling to cells
C          12 = W scaling to cells
C          13 = DXC = -2 * Pi * delta RA (in 1/cells)
C          14 = DYC = -2 * Pi * delta DEC
C          15 = DZC = -2 * Pi * delta Z
C-----------------------------------------------------------------------
      INTEGER   UV, VIS, WT, L, G, CX, CY, NO2, M, LROW,
     *   CNT, TY, UV1, UV2, IWORK1, IWORK2, VIS2, NOSHF,
     *   NOTAP, JCNT, II, IUV, IVIS, IWT, ITY, IABS,
     *   M1, M2, M8, M9, M10, M11, M12, M13, M14, M15
      DATA M1, M2, M8, M9, M10, M11, M12, M13, M14, M15
     *    / 1,  2,  8,  9,  10,  11,  12,  13,  14,  15/
C-----------------------------------------------------------------------
C                                       Set other pointers
      UV1 = UV + 1
      UV2 = UV + 2
C                                       Save values to be changed
      IUV = UV
      IVIS = VIS
      IWT = WT
      JCNT = IABS (CNT)
C                                       Check shift
      NOSHF = CNT
      IF (JCNT.LE.0) GO TO 999
C                                       Scale u,v,w to cells.
      CALL QVSMUL (UV, L, M10, UV, L, JCNT)
      CALL QVSMUL (UV1, L, M11, UV1, L, JCNT)
      CALL QVSMUL (UV2, L, M12, UV2, L, JCNT)
C                                       Check if tapered and set work
C                                       pointers.
      NOTAP = TY
      ITY = IABS (TY)
C                                       Set addresses of work array
      IF (ITY.EQ.1) IWORK1 = VIS + 2
      IF (ITY.NE.1) IWORK1 = VIS - 2
      IWORK2 = IWORK1 + 1
C                                       Taper
      IF (NOTAP.GT.0) GO TO 100
         CALL QVMUL (UV, L, UV, L, IWORK1, L, JCNT)
         CALL QVMUL (UV1, L, UV1, L, IWORK2, L, JCNT)
         CALL QVSMUL (IWORK1, L, M8, IWORK1, L, JCNT)
         CALL QVSMA (IWORK2, L, M9, IWORK1, L, IWORK1, L, JCNT)
         CALL QVEXP (IWORK1, L, IWORK1, L, JCNT)
         CALL QVMUL (WT, L, IWORK1, L, WT, L, JCNT)
C                                       Shift position.
 100  IF (NOSHF.LT.0) GO TO 200
         CALL QVSMUL (UV, L, M13, IWORK1, L, JCNT)
         CALL QVSMA (UV1, L, M14, IWORK1, L, IWORK1, L, JCNT)
         CALL QVSMA (UV2, L, M15, IWORK1, L, IWORK1, L, JCNT)
         CALL QVSIN (IWORK1, L, IWORK2, L, JCNT)
         CALL QVCOS (IWORK1, L, IWORK1, L, JCNT)
         CALL QCVMUL (IWORK1, L, VIS, L, VIS, L, JCNT, M1)
C                                       IPOL (and beam) or VPOL.
 200  IF (ITY.EQ.2) GO TO 300
         DO 250 II = 1,JCNT
            CALL QGRD3 (IUV, IVIS, IWT, G, CX, CY, NO2, M, LROW)
C                                       Update pointers
            IUV = IUV + L
            IVIS = IVIS + L
            IWT = IWT + L
 250        CONTINUE
         GO TO 999
C                                       Two map gridding. (Q-UPOL-line)
C                                       Shift positions (vis2).
 300     IF (NOSHF.LT.0) GO TO 400
            VIS2 = VIS + 2
            CALL QCVMUL (IWORK1, L, VIS2, L, VIS2, L, JCNT, M1)
 400     DO 450 II = 1,JCNT
            CALL QGRD2 (IUV, IVIS, IWT, G, CX, CY, NO2, M, LROW)
C                                       Update pointers.
            IUV = IUV + L
            IVIS = IVIS + L
            IWT = IWT + L
 450        CONTINUE
C
 999  RETURN
      END
