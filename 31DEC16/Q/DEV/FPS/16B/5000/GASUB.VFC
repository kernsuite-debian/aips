      DEFINE GASUB (MOD,U,VS,INCVS,INCF,INCS,NCOMP,NVIS,NF,NS,FLAG)
"-----------------------------------------------------------------------
"! FPS VFC routine: Subtract model Gaussian visibility from uv data.
"# AP-appl
"-----------------------------------------------------------------------
";  Copyright (C) 1995
";  Associated Universities, Inc. Washington DC, USA.
";
";  This program is free software; you can redistribute it and/or
";  modify it under the terms of the GNU General Public License as
";  published by the Free Software Foundation; either version 2 of
";  the License, or (at your option) any later version.
";
";  This program is distributed in the hope that it will be useful,
";  but WITHOUT ANY WARRANTY; without even the implied warranty of
";  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
";  GNU General Public License for more details.
";
";  You should have received a copy of the GNU General Public
";  License along with this program; if not, write to the Free
";  Software Foundation, Inc., 675 Massachusetts Ave, Cambridge,
";  MA 02139, USA.
";
";  Correspondence concerning AIPS should be addressed as follows:
";         Internet email: aipsmail@nrao.edu.
";         Postal address: AIPS Project Office
";                         National Radio Astronomy Observatory
";                         520 Edgemont Road
";                         Charlottesville, VA 22903-2475 USA
"-----------------------------------------------------------------------
"-----------------------------------------------------------------------
      LOCAL PHASE,REAL,IMAG,X,Y,Z,V,W,JVS,MF,F,AMP,A,B,C,MAMP,S
"  VERSION FOR FPS5000 (RECT FLAKY)
"
"     GASUB subtracts the model visibility derived from Gaussian
"     components into visibility records.  Arbitrary numbers
"     of frequencies and polarizations can be processed.
"     The weights of the visibilities are multiplied times
"     the square of the amplitude of the model visibility.
"
"     GASUB uses AP locations 0 and 1 and expects an array of length NS
"     beginning in location 2+NF composed of the correlator factors.
"     Beginning in location 2 should be an array of length NF :
"              Freq(0) / Freq(ref) - 1.0
"              Freq(1) / Freq(0)   - 1.0
"                      .
"                      .
"                      .
"              Freq(NF-1) / Freq(NF-2) - 1.0
"
"     Inputs:
"     MOD     Base address of Gaussian components, increment=12
"                  0 = used (model amp)
"                  1 = used (PHASE)
"                  2 = used (REAL)
"                  3 = used (IMAG)
"                  4 = -2 * PI * X (radians)
"                  5 = -2 * PI * Y
"                  6 = -2 * PI * Z
"                  7 = A = -((COS(PA)*SIG(MAJ))**2 +
"                          (SIN(PA)*SIG(MIN))**2)
"                  8 = B = -((SIN(PA)*SIG(MAJ))**2 +
"                          (COS(PA)*SIG(MIN))**2)
"                  9 = C = -2*(SIN(PA)*COS(PA)*
"                           (SIG(MAJ)**2 - SIG(MIN)**2)
"                 10 = Amplitude
"                 11 = used (MAMP)
"     U       Base address of U's, assumed followed by V, W
"     VS      Base address of vis rec. (real, imag, wt)
"     INCVS   Increment of VS for next visibility
"     INCF    Increment of VS for next frequency
"     INCS    Increment of VS for next Stokes (RR or LL)
"     NCOMP   Number of Gaussian components.
"     NVIS    Number of visibilities.
"     NF      Number of frequencies.
"     NS      Number of Stokes (usually 1 or 2)
"     FLAG    If FLAG < 0 multiply model vis by i (SQRT(-1))
"
"
"                                       MAKE SURE THERE IS DATA
"
      IF NCOMP <= 0 GOTO S999
      IF NVIS <= 0 GOTO S999
      IF NF <= 0 GOTO S999
      IF NS <= 0 GOTO S999
"
"     SETUP
"
      SP09 = MOD
      PHASE = SP09 + 1
      REAL = SP09 + 2
      IMAG = SP09 + 3
      X = SP09 + 4
      Y = SP09 + 5
      Z = SP09 + 6
      A = SP09 + 7
      B = SP09 + 8
      C = SP09 + 9
      AMP = SP09 + 10
      MAMP = SP09 + 11
      V = U + 1
      W = V + 1
"
"      BEGIN VIS LOOP
"
"      INITIAL PHASE
LOOPV: CALL VSMUL(X,12,U,PHASE,12,NCOMP)           "U*X
       CALL VSMA(Y,12,V,PHASE,12,PHASE,12,NCOMP)   "ADD V*Y
       CALL VSMA(Z,12,W,PHASE,12,PHASE,12,NCOMP)   "ADD W*Z
"      INITIAL AMPLITUDE FACTOR
       CALL VSMUL(A,12,V,IMAG,12,NCOMP)           "A*V
       CALL VSMUL(IMAG,12,V,MAMP,12,NCOMP)        "A*V*V
       CALL VSMUL(B,12,U,IMAG,12,NCOMP)           "B*U
       CALL VSMA(IMAG,12,U,MAMP,12,MAMP,12,NCOMP) "A*V*V+B*U*U
       CALL VSMUL(C,12,U,IMAG,12,NCOMP)           "C*U
       CALL VSMA(IMAG,12,V,MAMP,12,MAMP,12,NCOMP) "A*V*V+B*U*U+C*U*V
"
       JVS = VS                                 "SET VIS POINTER.
       MF = NF                                  "SET FREQ. COUNTER.
       F = 2                                    "SET FREQ. TAB. POINTER
       S = NF + 2
"
"      BEGIN FREQUENCY LOOP
"
LOOPF: CALL VSMA(PHASE,12,F,PHASE,12,PHASE,12,NCOMP)"CORR. PHASE FOR FREQ.
"      MODEL AMPLITUDE - CORRECT FOR FREQUENCY
       CALL VSMA(MAMP,12,F,MAMP,12,MAMP,12,NCOMP)
       CALL VSMA(MAMP,12,F,MAMP,12,MAMP,12,NCOMP)       "SCALE TO FREQ.
       CALL VEXP(MAMP,12,MOD,12,NCOMP)                  "EXPONENTIATE
       CALL VMUL(MOD,12,AMP,12,MOD,12,NCOMP)            "MODEL AMPLITUDE
       F = F + 1
"      PHASE
"       CALL RECT(MOD,12,REAL,12,NCOMP)              "POLAR => RECT.
"    RECT HAS PROBLEMS ON FPS 5000
       CALL VCOS (PHASE,12,REAL,12,NCOMP)
       CALL VSIN (PHASE,12,IMAG,12,NCOMP)
       CALL VMUL (REAL,12,MOD,12,REAL,12,NCOMP)
       CALL VMUL (IMAG,12,MOD,12,IMAG,12,NCOMP)
       CALL SVE(REAL,12,0,NCOMP)                 "SUM REAL TO LOC 0.
       CALL SVE(IMAG,12,1,NCOMP)                 "SUM IMAG TO LOC 1.
       CALL CVSMS(JVS,INCS,0,S,1,JVS,INCS,NS,FLAG)"SUB. MODEL FROM VIS.
       JVS = JVS + INCF                         "UPDATE VIS. POINTER
       MF = MF - 1                              "DEC. FREQ. LOOP COUNT.
       IF MF > 0 GOTO LOOPF                     "END FREQ. LOOP
"
       SP09 = INCVS
       VS = VS + SP09
       U = U + SP09
       V = V + SP09
       W = W + SP09                             "UPDATE POINTERS
"
       NVIS = NVIS - 1                          "DEC VIS. LOOP COUNTER.
       IF NVIS > 0 GOTO LOOPV                   "END VIS. LOOP.
"
S999:  END
