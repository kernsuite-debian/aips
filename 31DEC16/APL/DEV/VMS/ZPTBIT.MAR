        .TITLE  ZPTBIT (NBITS, WORD, BITS)
;-----------------------------------------------------------------------
;! put array of bits into a word
;# Z Service
;-----------------------------------------------------------------------
;;  Copyright (C) 1995
;;  Associated Universities, Inc. Washington DC, USA.
;;
;;  This program is free software; you can redistribute it and/or
;;  modify it under the terms of the GNU General Public License as
;;  published by the Free Software Foundation; either version 2 of
;;  the License, or (at your option) any later version.
;;
;;  This program is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;  GNU General Public License for more details.
;;
;;  You should have received a copy of the GNU General Public
;;  License along with this program; if not, write to the Free
;;  Software Foundation, Inc., 675 Massachusetts Ave, Cambridge,
;;  MA 02139, USA.
;;
;;  Correspondence concerning AIPS should be addressed as follows:
;;         Internet email: aipsmail@nrao.edu.
;;         Postal address: AIPS Project Office
;;                         National Radio Astronomy Observatory
;;                         520 Edgemont Road
;;                         Charlottesville, VA 22903-2475 USA
;-----------------------------------------------------------------------
;-----------------------------------------------------------------------
;   Build WORD from NBITS bit values contained in the array BITS, where
;   BITS[1] supplies the lsb, BITS[2] the next higher bit, etc.  The
;   rest of the bits in WORD are set to zero.  For example, if
;
;   bits[0:*] = 0 1 1 1 0 1 0 1 ... 0 1 1 1 0 0 0 0
;               ^                                 ^
;              LSB                               MSB
;   and nbits = 4, then word = 14 (decimal)
;   Inputs:
;      NBITS   I      Number of bits to use from the array "bits"
;      BITS    I(*)   Array of bit values (0 or 1)
;   Output:
;      WORD    I      Result containing bit pattern from the first
;                     "nbits" values of the array "bits"
;   VMS version
;-----------------------------------------------------------------------
        .ENTRY  ZPTBIT,^M<R2,R3>
        CLRL    R0               ; R0 <-- 0
        MOVL    @4(AP),R3        ; R3 = number of bits.
        ADDL    R3,R3            ; R3 = byte offset to end of field+2.
        ADDL    R3,R3            ; R3 = byte offset to end of field+2.
        ADDL    12(AP),R3        ; R3 = address of end of field in
                                 ;      array BITS + 2.
        MOVL    @4(AP),R2        ; R2 = number of bits.
        BEQL    PBSLEV           ; If R2 zero then leave
PBLOOP:
        ASHL    #1,R0,R0         ; Shift R0 to get ready to add bit
        ADDL    -(R3),R0         ; R0 <-- R0 + current bit
        DECL    R2               ; Decrement bit count
        BNEQ    PBLOOP
PBSLEV:
        MOVL    R0,@8(AP)        ; Return the value.
        RET
        .END
